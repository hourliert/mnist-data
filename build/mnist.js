/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var dataPath = './digits';
var Digit = (function () {
    function Digit(pixels, value) {
        this.pixels = pixels;
        this.value = value;
    }
    return Digit;
})();
var MnistData = (function () {
    function MnistData(size) {
        if (size === void 0) { size = 20; }
        var trainings = [], testing, labels;
        for (var i = 0; i < size; i++) {
            trainings.push(JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "training_" + i + ".json")).toString()));
        }
        testing = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "testing.json")).toString());
        labels = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "mnist_labels.json")).toString());
        this.mnistTraining = this.parseTraining(trainings, labels);
        this.mnistTesting = this.parseTesting(testing, labels);
    }
    MnistData.prototype.parseTraining = function (trainings, labels) {
        var digits = [];
        for (var i = 0; i < trainings.length; i++) {
            var set = trainings[i], cpt = 0, tmp = [];
            if (set.length % (3 * Math.pow(28, 2)) !== 0) {
                throw new Error("The length of the " + i + " portion should be a multiple " + 3 * Math.pow(28, 2));
            }
            for (var j = 0; j < set.length; j += 3) {
                if (cpt === (Math.pow(28, 2))) {
                    var index = i * 3000 + Math.floor(j / (3 * Math.pow(28, 2)));
                    digits.push(new Digit(tmp, labels[index]));
                    cpt = 0;
                    tmp.length = 0;
                }
                tmp.push(set[j], set[j + 1], set[j + 2]);
                cpt++;
            }
        }
        return digits;
    };
    MnistData.prototype.parseTesting = function (testing, labels) {
        var digits = [], set = testing, cpt = 0, tmp = [];
        if (set.length % (3 * Math.pow(28, 2)) !== 0) {
            throw new Error("The length of the testing portion should be a multiple " + 3 * Math.pow(28, 2));
        }
        for (var j = 0; j < set.length; j += 3) {
            if (cpt === (Math.pow(28, 2))) {
                var index = 20 * 3000 + Math.floor(j / (3 * Math.pow(28, 2)));
                digits.push(new Digit(tmp, labels[index]));
                cpt = 0;
                tmp.length = 0;
            }
            tmp.push(set[j], set[j + 1], set[j + 2]);
            cpt++;
        }
        return digits;
    };
    return MnistData;
})();
exports.MnistData = MnistData;

//# sourceMappingURL=data:application/json;base64,