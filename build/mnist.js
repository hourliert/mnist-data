/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var dataPath = './digits';
var Digit = (function () {
    function Digit(pixels, value) {
        this.pixels = pixels;
        this.value = value;
    }
    return Digit;
})();
var MnistData = (function () {
    function MnistData(size) {
        if (size === void 0) { size = 20; }
        var trainings = [], testing, labels;
        for (var i = 0; i < size; i++) {
            trainings.push(fs_1.readFileSync(path_1.join(__dirname, dataPath, "training_" + i + ".json")));
        }
        testing = fs_1.readFileSync(path_1.join(__dirname, dataPath, "testing.json"));
        labels = fs_1.readFileSync(path_1.join(__dirname, dataPath, "mnist_labels.json"));
        this.mnistTraining = this.parseTraining(trainings, labels);
        this.mnistTesting = this.parseTesting(testing, labels);
    }
    MnistData.prototype.parseTraining = function (trainings, labels) {
        var digits = [];
        for (var i = 0; i < trainings.length; i++) {
            var set = trainings[i], index = i * 3000, cpt = 0, tmp = [];
            if (set.length % (3 * Math.pow(28, 2)) !== 0) {
                throw new Error("The length of the " + i + " portion should be a multiple " + 3 * Math.pow(28, 2));
            }
            for (var j = 0; j < set.length; j++) {
                index += Math.floor(j / 3);
                if (cpt === (3 * (Math.pow(28, 2) - 1))) {
                    digits.push(new Digit(tmp, labels[index]));
                    cpt = 0;
                    tmp.length = 0;
                }
                tmp.push(set[j]);
                cpt++;
            }
        }
        return digits;
    };
    MnistData.prototype.parseTesting = function (testing, labels) {
        var digits = [], set = testing, index = 20 * 3000, cpt = 0, tmp = [];
        if (set.length % (3 * Math.pow(28, 2)) !== 0) {
            throw new Error("The length of the testing portion should be a multiple " + 3 * Math.pow(28, 2));
        }
        for (var j = 0; j < set.length; j++) {
            index += Math.floor(j / 3);
            if (cpt === (3 * (Math.pow(28, 2) - 1))) {
                digits.push(new Digit(tmp, labels[index]));
                cpt = 0;
                tmp.length = 0;
            }
            tmp.push(set[j]);
            cpt++;
        }
        return digits;
    };
    return MnistData;
})();
exports.MnistData = MnistData;

//# sourceMappingURL=data:application/json;base64,