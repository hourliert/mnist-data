/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var dataPath = './digits', digitsPerFile = 3000, numberOfTrainings = 50000;
var Digit = (function () {
    function Digit(pixels, value) {
        this.pixels = pixels;
        this.value = value;
    }
    return Digit;
})();
exports.Digit = Digit;
var MnistData = (function () {
    function MnistData(numberOfTrainingToParse, numberOfTestingToParse) {
        if (numberOfTrainingToParse === void 0) { numberOfTrainingToParse = 20; }
        if (numberOfTestingToParse === void 0) { numberOfTestingToParse = 1; }
        this.numberOfTrainingToParse = numberOfTrainingToParse;
        this.numberOfTestingToParse = numberOfTestingToParse;
        var trainings = [], testing, labels;
        for (var i = 0; i < numberOfTrainingToParse; i++) {
            trainings.push(JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "training_" + i + ".json")).toString()));
        }
        testing = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "testing.json")).toString());
        labels = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "mnist_labels.json")).toString());
        this.mnistTraining = this.parseSets(trainings, labels);
        this.mnistTesting = this.parseOneSet(testing, labels);
        this.mnistValidating = this.mnistTraining.splice(numberOfTrainings);
    }
    MnistData.prototype.getOneTraining = function () {
        var index = Math.floor(Math.random() * this.mnistTraining.length);
        return this.mnistTraining[index];
    };
    MnistData.prototype.getOneValidating = function () {
        var index = Math.floor(Math.random() * this.mnistValidating.length);
        return this.mnistTesting[index];
    };
    MnistData.prototype.getOneTesting = function () {
        var index = Math.floor(Math.random() * this.mnistTesting.length);
        return this.mnistTesting[index];
    };
    MnistData.prototype.parseSets = function (sets, labels) {
        var digits = [];
        for (var i = 0; i < sets.length; i++) {
            digits = digits.concat(this.parseOneSet(sets[i], labels, i));
        }
        return digits;
    };
    MnistData.prototype.parseOneSet = function (set, labels, setIndex) {
        if (setIndex === void 0) { setIndex = 20; }
        var tmp = [], digits = [];
        if (set.length % (Math.pow(28, 2)) !== 0) {
            throw new Error("The length of the testing portion should be a multiple " + 3 * Math.pow(28, 2));
        }
        for (var j = 0; j < set.length; j++) {
            if (tmp.length === (Math.pow(28, 2))) {
                var index = setIndex * 3000 + Math.floor(j / (Math.pow(28, 2) - 1));
                digits.push(new Digit(tmp, labels[index]));
                tmp = [];
            }
            tmp.push(set[j]);
        }
        if (tmp.length === (Math.pow(28, 2))) {
            var index = setIndex * 3000 + Math.floor(set.length / (Math.pow(28, 2) - 1));
            digits.push(new Digit(tmp, labels[index]));
            tmp = [];
        }
        return digits;
    };
    return MnistData;
})();
exports.MnistData = MnistData;

//# sourceMappingURL=data:application/json;base64,