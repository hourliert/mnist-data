/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var dataPath = './digits', digitsPerFile = 3000, numberOfTrainings = 50000, imageWidth = 28, imageHeight = 28;
var MnistData = (function () {
    function MnistData(numberOfTrainingToParse, numberOfTestingToParse) {
        if (numberOfTrainingToParse === void 0) { numberOfTrainingToParse = 20; }
        if (numberOfTestingToParse === void 0) { numberOfTestingToParse = 1; }
        this.numberOfTrainingToParse = numberOfTrainingToParse;
        this.numberOfTestingToParse = numberOfTestingToParse;
        var trainings = [], testing, labels;
        for (var i = 0; i < numberOfTrainingToParse; i++) {
            trainings.push(JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "training_" + i + ".json")).toString()));
        }
        testing = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "testing.json")).toString());
        labels = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, dataPath, "mnist_labels.json")).toString());
        this.mnistTraining = this.parseSets(trainings, labels);
        this.mnistTesting = this.parseOneSet(testing, labels);
        this.mnistValidating = this.mnistTraining.splice(numberOfTrainings);
    }
    Object.defineProperty(MnistData.prototype, "training", {
        get: function () {
            return this.mnistTraining;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MnistData.prototype, "validating", {
        get: function () {
            return this.mnistValidating;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MnistData.prototype, "testing", {
        get: function () {
            return this.mnistTesting;
        },
        enumerable: true,
        configurable: true
    });
    MnistData.draw = function (digit, context, offsetX, offsetY) {
        var imageData = context.getImageData(offsetX || 0, offsetY || 0, imageWidth, imageHeight);
        for (var i = 0; i < digit.length; i++) {
            imageData.data[i * 4] = Math.floor(digit[i] * 255);
            imageData.data[i * 4 + 1] = Math.floor(digit[i] * 255);
            imageData.data[i * 4 + 2] = Math.floor(digit[i] * 255);
        }
        context.putImageData(imageData, offsetX || 0, offsetY || 0);
    };
    MnistData.prototype.getOneTraining = function () {
        var index = Math.floor(Math.random() * this.mnistTraining.length);
        return this.mnistTraining[index];
    };
    MnistData.prototype.getOneValidating = function () {
        var index = Math.floor(Math.random() * this.mnistValidating.length);
        return this.mnistTesting[index];
    };
    MnistData.prototype.getOneTesting = function () {
        var index = Math.floor(Math.random() * this.mnistTesting.length);
        return this.mnistTesting[index];
    };
    MnistData.prototype.parseSets = function (sets, labels) {
        var digits = [];
        for (var i = 0; i < sets.length; i++) {
            digits = digits.concat(this.parseOneSet(sets[i], labels, i));
        }
        return digits;
    };
    MnistData.prototype.parseOneSet = function (set, labels, setIndex) {
        if (setIndex === void 0) { setIndex = 20; }
        var tmp = [], digits = [];
        if (set.length % (Math.pow(28, 2)) !== 0) {
            throw new Error("The length of the testing portion should be a multiple " + 3 * Math.pow(28, 2));
        }
        for (var j = 0; j < set.length; j++) {
            if (tmp.length === (Math.pow(28, 2))) {
                var index = setIndex * 3000 + Math.floor(j / (Math.pow(28, 2)));
                digits.push({
                    input: tmp,
                    output: this.convertDigitisToArray(labels[index - 1]),
                    value: labels[index - 1]
                });
                tmp = [];
            }
            tmp.push(set[j]);
        }
        if (tmp.length === (Math.pow(28, 2))) {
            var index = setIndex * 3000 + Math.floor(set.length / (Math.pow(28, 2)));
            digits.push({
                input: tmp,
                output: this.convertDigitisToArray(labels[index - 1]),
                value: labels[index - 1]
            });
            tmp = [];
        }
        return digits;
    };
    MnistData.prototype.convertDigitisToArray = function (value) {
        var res = Array.apply(null, Array(10)).map(Number.prototype.valueOf, 0);
        res = res.map(function (x, i) {
            if (i === value) {
                return 1;
            }
            return 0;
        });
        return res;
    };
    return MnistData;
})();
exports.MnistData = MnistData;

//# sourceMappingURL=data:application/json;base64,