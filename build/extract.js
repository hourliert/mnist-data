/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var NodePng = require('node-png');
var _ = require('lodash');
var PNG = NodePng.PNG;
var size = 21;
var dataPath = './digits/', exportPath = './digits/';
function convertImage(imagePath) {
    return new Promise(function (resolve, reject) {
        fs_1.createReadStream(imagePath)
            .pipe(new PNG())
            .on('error', function () {
            reject();
        })
            .on('parsed', function (data) {
            console.log(imagePath + " parsed");
            var local = [];
            for (var y = 0; y < this.height; y++) {
                for (var x = 0; x < this.width; x++) {
                    var idx = (this.width * y + x) << 2;
                    local.push(this.data[idx], this.data[idx + 1], this.data[idx + 2]);
                }
            }
            resolve(local);
        });
    });
}
function writeJson(jsonPath, data) {
    return new Promise(function (resolve, reject) {
        fs_1.writeFile(jsonPath, JSON.stringify(_.flatten(data)), function (error) {
            if (error) {
                reject(error);
            }
            console.log(jsonPath + " savedd");
            resolve(true);
        });
    });
}
function completeDataset(trainings, testing) {
    var p = [];
    for (var i in trainings) {
        console.log("Scheduling writting of " + i + ".");
        p.push(writeJson(path_1.join(__dirname, dataPath, "training_" + i + ".json"), trainings[i]));
    }
    console.log("Scheduling writting of " + trainings.length + ".");
    p.push(writeJson(path_1.join(__dirname, dataPath, "testing.json"), testing));
    Promise.all(p).then(function () {
        console.log('Export done.');
    });
}
function bootstrap() {
    var p = [];
    console.log('Starting extraction');
    for (var i = 0; i < size; i++) {
        console.log("Scheduling " + i);
        p.push(convertImage(path_1.join(__dirname, dataPath, "mnist_batch_" + i + ".png")));
    }
    Promise.all(p).then(function (images) {
        var testing = images.splice(images.length - 1);
        completeDataset(images, testing);
    });
}
bootstrap();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3QudHMiXSwibmFtZXMiOlsiY29udmVydEltYWdlIiwid3JpdGVKc29uIiwiY29tcGxldGVEYXRhc2V0IiwiYm9vdHN0cmFwIl0sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsbUJBQTBDLElBQUksQ0FBQyxDQUFBO0FBQy9DLHFCQUFtQixNQUFNLENBQUMsQ0FBQTtBQUMxQixJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVoQixJQUFNLFFBQVEsR0FBRyxXQUFXLEVBQ3RCLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFFL0Isc0JBQXVCLFNBQVM7SUFDOUJBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQVNBLE9BQU9BLEVBQUVBLE1BQU1BO1FBQ3pDLHFCQUFnQixDQUFDLFNBQVMsQ0FBQzthQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUNmLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQzthQUNELEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBUyxJQUFJO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUksU0FBUyxZQUFTLENBQUMsQ0FBQztZQUNuQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7WUFFZixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNyQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29C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TUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDMUVBLENBQUNBO0lBRURBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUNBLE1BQU1BO1FBQ3pCQSxJQUFJQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5Q0EsZUFBZUEsQ0FBQ0EsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQsU0FBUyxFQUFFLENBQUMiLCJmaWxlIjoiZXh0cmFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2FsbC50c1wiIC8+XG5cbmltcG9ydCB7Y3JlYXRlUmVhZFN0cmVhbSwgd3JpdGVGaWxlfSBmcm9tICdmcyc7XG5pbXBvcnQge2pvaW59IGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgTm9kZVBuZyBmcm9tICdub2RlLXBuZyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IFBORyA9IE5vZGVQbmcuUE5HO1xuXG5jb25zdCBzaXplID0gMjE7XG4gXG5jb25zdCBkYXRhUGF0aCA9ICcuL2RpZ2l0cy8nLFxuICAgICAgZXhwb3J0UGF0aCA9ICcuL2RpZ2l0cy8nO1xuXG5mdW5jdGlvbiBjb252ZXJ0SW1hZ2UgKGltYWdlUGF0aCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY3JlYXRlUmVhZFN0cmVhbShpbWFnZVBhdGgpXG4gICAgLnBpcGUobmV3IFBORygpKVxuICAgIC5vbignZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdCgpO1xuICAgIH0pXG4gICAgLm9uKCdwYXJzZWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtpbWFnZVBhdGh9IHBhcnNlZGApO1xuICAgICAgdmFyIGxvY2FsID0gW107XG4gICAgICBcbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICAgIHZhciBpZHggPSAodGhpcy53aWR0aCAqIHkgKyB4KSA8PCAyO1xuICBcbiAgICAgICAgICBsb2NhbC5wdXNoKHRoaXMuZGF0YVtpZHhdLCB0aGlzLmRhdGFbaWR4KzFdLCB0aGlzLmRhdGFbaWR4KzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgIHJlc29sdmUobG9jYWwpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVKc29uIChqc29uUGF0aCwgZGF0YSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgd3JpdGVGaWxlKGpzb25QYXRoLCBKU09OLnN0cmluZ2lmeShfLmZsYXR0ZW4oZGF0YSkpLCAoZXJyb3IpID0+IHtcbiAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgfVxuICAgICAgIGNvbnNvbGUubG9nKGAke2pzb25QYXRofSBzYXZlZGRgKTtcbiAgICAgICByZXNvbHZlKHRydWUpO1xuICAgIH0pXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZURhdGFzZXQgKHRyYWluaW5nczogbnVtYmVyW11bXSwgdGVzdGluZzogbnVtYmVyW10pIHtcbiAgdmFyIHAgPSBbXTtcbiAgXG4gIGZvciAobGV0IGkgaW4gdHJhaW5pbmdzKSB7XG4gICAgY29uc29sZS5sb2coYFNjaGVkdWxpbmcgd3JpdHRpbmcgb2YgJHtpfS5gKTtcbiAgICBwLnB1c2god3JpdGVKc29uKGpvaW4oX19kaXJuYW1lLCBkYXRhUGF0aCwgYHRyYWluaW5nXyR7aX0uanNvbmApLCB0cmFpbmluZ3NbaV0pKTtcbiAgfVxuICBjb25zb2xlLmxvZyhgU2NoZWR1bGluZyB3cml0dGluZyBvZiAke3RyYWluaW5ncy5sZW5ndGh9LmApO1xuICBwLnB1c2god3JpdGVKc29uKGpvaW4oX19kaXJuYW1lLCBkYXRhUGF0aCwgYHRlc3RpbmcuanNvbmApLCB0ZXN0aW5nKSk7XG4gIFxuICBQcm9taXNlLmFsbChwKS50aGVuKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnRXhwb3J0IGRvbmUuJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBib290c3RyYXAgKCkge1xuICB2YXIgcCA9IFtdO1xuICBcbiAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIGV4dHJhY3Rpb24nKTsgIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgIGNvbnNvbGUubG9nKGBTY2hlZHVsaW5nICR7aX1gKTtcbiAgICBwLnB1c2goY29udmVydEltYWdlKGpvaW4oX19kaXJuYW1lLCBkYXRhUGF0aCwgYG1uaXN0X2JhdGNoXyR7aX0ucG5nYCkpKTtcbiAgfVxuICBcbiAgUHJvbWlzZS5hbGwocCkudGhlbigoaW1hZ2VzKSA9PiB7XG4gICAgbGV0IHRlc3RpbmcgPSBpbWFnZXMuc3BsaWNlKGltYWdlcy5sZW5ndGggLTEpO1xuICAgIGNvbXBsZXRlRGF0YXNldChpbWFnZXMsIHRlc3RpbmcpO1xuICB9KTtcbn1cblxuYm9vdHN0cmFwKCk7XG5cblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=