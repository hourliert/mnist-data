/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var NodePng = require('node-png');
var _ = require('lodash');
var PNG = NodePng.PNG;
var size = 21, accuracy = 1 / 1000;
var dataPath = './digits/', exportPath = './digits/';
function convertImage(imagePath) {
    return new Promise(function (resolve, reject) {
        fs_1.createReadStream(imagePath)
            .pipe(new PNG())
            .on('metadata', function (data) {
            // console.log(data);
        })
            .on('error', function () {
            reject();
        })
            .on('parsed', function (data) {
            console.log(imagePath + " parsed");
            var local = [];
            for (var y = 0; y < this.height; y++) {
                for (var x = 0; x < this.width; x++) {
                    var idx = (this.width * y + x) << 2;
                    local.push(Math.floor(this.data[idx] / 255 * (1 / accuracy)) / (1 / accuracy));
                }
            }
            resolve(local);
        });
    });
}
function writeJson(jsonPath, data) {
    return new Promise(function (resolve, reject) {
        fs_1.writeFile(jsonPath, JSON.stringify(_.flatten(data)), function (error) {
            if (error) {
                reject(error);
            }
            console.log(jsonPath + " savedd");
            resolve(true);
        });
    });
}
function completeDataset(trainings, testing) {
    var p = [];
    for (var i in trainings) {
        console.log("Scheduling writting of " + i + ".");
        p.push(writeJson(path_1.join(__dirname, dataPath, "training_" + i + ".json"), trainings[i]));
    }
    console.log("Scheduling writting of " + trainings.length + ".");
    p.push(writeJson(path_1.join(__dirname, dataPath, "testing.json"), testing));
    Promise.all(p).then(function () {
        console.log('Export done.');
    });
}
function bootstrap() {
    var p = [];
    console.log('Starting extraction');
    for (var i = 0; i < size; i++) {
        console.log("Scheduling " + i);
        p.push(convertImage(path_1.join(__dirname, dataPath, "mnist_batch_" + i + ".png")));
    }
    Promise.all(p).then(function (images) {
        var testing = images.splice(images.length - 1);
        completeDataset(images, testing);
    });
}
bootstrap();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3QudHMiXSwibmFtZXMiOlsiY29udmVydEltYWdlIiwid3JpdGVKc29uIiwiY29tcGxldGVEYXRhc2V0IiwiYm9vdHN0cmFwIl0sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsbUJBQTBDLElBQUksQ0FBQyxDQUFBO0FBQy9DLHFCQUFtQixNQUFNLENBQUMsQ0FBQTtBQUMxQixJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLElBQU0sSUFBSSxHQUFHLEVBQUUsRUFDVCxRQUFRLEdBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQztBQUV4QixJQUFNLFFBQVEsR0FBRyxXQUFXLEVBQ3RCLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFFL0Isc0JBQXVCLFNBQVM7SUFDOUJBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQVNBLE9BQU9BLEVBQUVBLE1BQU1BO1FBQ3pDLHFCQUFnQixDQUFDLFNBQVMsQ0FBQzthQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUNmLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxJQUFJO1lBQzVCLHFCQUFxQjtRQUN2QixDQUFDLENBQUM7YUFDRCxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ1gsTUFBTSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUM7YUFDRCxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQVMsSUFBSTtZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFJLFNBQVMsWUFBUyxDQUFDLENBQUM7WUFFbkMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBRWYsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDckMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBRXBDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzdFLENBQUM7WUFDSCxDQUFDO1lBRUYsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtBQUNMQSxDQUFDQTtBQUVELG1CQUFvQixRQUFRLEVBQUUsSUFBSTtJQUNoQ0MsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7UUFDekMsY0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxVQUFDLEtBQUs7WUFDeEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDVixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEIsQ0FBQztZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUksUUFBUSxZQUFTLENBQUMsQ0FBQztZQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQseUJBQTBCLFNBQXFCLEVBQUUsT0FBaUI7SUFDaEVDLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO0lBRVhBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSw0QkFBMEJBLENBQUNBLE1BQUdBLENBQUNBLENBQUNBO1FBQzVDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxRQUFRQSxFQUFFQSxjQUFZQSxDQUFDQSxVQUFPQSxDQUFDQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNuRkEsQ0FBQ0E7SUFDREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsNEJBQTBCQSxTQUFTQSxDQUFDQSxNQUFNQSxNQUFHQSxDQUFDQSxDQUFDQTtJQUMzREEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsV0FBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsUUFBUUEsRUFBRUEsY0FBY0EsQ0FBQ0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFdEVBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1FBQ2xCQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtJQUM5QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFFRDtJQUNFQyxJQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUVYQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBO0lBQ25DQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUM5QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZ0JBQWNBLENBQUdBLENBQUNBLENBQUNBO1FBQy9CQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxXQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxRQUFRQSxFQUFFQSxpQkFBZUEsQ0FBQ0EsU0FBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDMUVBLENBQUNBO0lBRURBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUNBLE1BQU1BO1FBQ3pCQSxJQUFJQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMvQ0EsZUFBZUEsQ0FBQ0EsTUFBTUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQsU0FBUyxFQUFFLENBQUMiLCJmaWxlIjoiZXh0cmFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2FsbC50c1wiIC8+XG5cbmltcG9ydCB7Y3JlYXRlUmVhZFN0cmVhbSwgd3JpdGVGaWxlfSBmcm9tICdmcyc7XG5pbXBvcnQge2pvaW59IGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgTm9kZVBuZyBmcm9tICdub2RlLXBuZyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IFBORyA9IE5vZGVQbmcuUE5HO1xuXG5jb25zdCBzaXplID0gMjEsXG4gICAgICBhY2N1cmFjeSA9IDEvMTAwMDtcbiBcbmNvbnN0IGRhdGFQYXRoID0gJy4vZGlnaXRzLycsXG4gICAgICBleHBvcnRQYXRoID0gJy4vZGlnaXRzLyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRJbWFnZSAoaW1hZ2VQYXRoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjcmVhdGVSZWFkU3RyZWFtKGltYWdlUGF0aClcbiAgICAucGlwZShuZXcgUE5HKCkpXG4gICAgLm9uKCdtZXRhZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdCgpO1xuICAgIH0pXG4gICAgLm9uKCdwYXJzZWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtpbWFnZVBhdGh9IHBhcnNlZGApO1xuICAgICAgXG4gICAgICB2YXIgbG9jYWwgPSBbXTtcbiAgICAgIFxuICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgICAgdmFyIGlkeCA9ICh0aGlzLndpZHRoICogeSArIHgpIDw8IDI7XG4gIFxuICAgICAgICAgIGxvY2FsLnB1c2goTWF0aC5mbG9vcih0aGlzLmRhdGFbaWR4XSAvIDI1NSAqICgxL2FjY3VyYWN5KSkgLyAoMS9hY2N1cmFjeSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgcmVzb2x2ZShsb2NhbCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZUpzb24gKGpzb25QYXRoLCBkYXRhKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB3cml0ZUZpbGUoanNvblBhdGgsIEpTT04uc3RyaW5naWZ5KF8uZmxhdHRlbihkYXRhKSksIChlcnJvcikgPT4ge1xuICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICB9XG4gICAgICAgY29uc29sZS5sb2coYCR7anNvblBhdGh9IHNhdmVkZGApO1xuICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgfSlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlRGF0YXNldCAodHJhaW5pbmdzOiBudW1iZXJbXVtdLCB0ZXN0aW5nOiBudW1iZXJbXSkge1xuICB2YXIgcCA9IFtdO1xuICBcbiAgZm9yIChsZXQgaSBpbiB0cmFpbmluZ3MpIHtcbiAgICBjb25zb2xlLmxvZyhgU2NoZWR1bGluZyB3cml0dGluZyBvZiAke2l9LmApO1xuICAgIHAucHVzaCh3cml0ZUpzb24oam9pbihfX2Rpcm5hbWUsIGRhdGFQYXRoLCBgdHJhaW5pbmdfJHtpfS5qc29uYCksIHRyYWluaW5nc1tpXSkpO1xuICB9XG4gIGNvbnNvbGUubG9nKGBTY2hlZHVsaW5nIHdyaXR0aW5nIG9mICR7dHJhaW5pbmdzLmxlbmd0aH0uYCk7XG4gIHAucHVzaCh3cml0ZUpzb24oam9pbihfX2Rpcm5hbWUsIGRhdGFQYXRoLCBgdGVzdGluZy5qc29uYCksIHRlc3RpbmcpKTtcbiAgXG4gIFByb21pc2UuYWxsKHApLnRoZW4oKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdFeHBvcnQgZG9uZS4nKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcCAoKSB7XG4gIHZhciBwID0gW107XG4gIFxuICBjb25zb2xlLmxvZygnU3RhcnRpbmcgZXh0cmFjdGlvbicpOyAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgY29uc29sZS5sb2coYFNjaGVkdWxpbmcgJHtpfWApO1xuICAgIHAucHVzaChjb252ZXJ0SW1hZ2Uoam9pbihfX2Rpcm5hbWUsIGRhdGFQYXRoLCBgbW5pc3RfYmF0Y2hfJHtpfS5wbmdgKSkpO1xuICB9XG4gIFxuICBQcm9taXNlLmFsbChwKS50aGVuKChpbWFnZXMpID0+IHtcbiAgICBsZXQgdGVzdGluZyA9IGltYWdlcy5zcGxpY2UoaW1hZ2VzLmxlbmd0aCAtIDEpO1xuICAgIGNvbXBsZXRlRGF0YXNldChpbWFnZXMsIHRlc3RpbmcpO1xuICB9KTtcbn1cblxuYm9vdHN0cmFwKCk7XG5cblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=