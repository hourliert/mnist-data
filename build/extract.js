/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var NodePng = require('node-png');
var _ = require('lodash');
var PNG = NodePng.PNG;
var size = 2;
var dataPath = './digits/', exportPath = './digits/';
function convertImage(imagePath) {
    return new Promise(function (resolve, reject) {
        fs_1.createReadStream(imagePath)
            .pipe(new PNG())
            .on('error', function () {
            reject();
        })
            .on('parsed', function (data) {
            console.log(imagePath + " parsed");
            var local = [];
            for (var y = 0; y < this.height; y++) {
                for (var x = 0; x < this.width; x++) {
                    var idx = (this.width * y + x) << 2;
                    local.push(this.data[idx], this.data[idx + 1], this.data[idx + 2]);
                }
            }
            resolve(local);
        });
    });
}
function writeJson(jsonPath, data) {
    return new Promise(function (resolve, reject) {
        fs_1.writeFile(jsonPath, JSON.stringify(_.flatten(data)), function (error) {
            if (error) {
                reject(error);
            }
            console.log(jsonPath + " savedd");
            resolve(true);
        });
    });
}
function completeDataset(trainings, testing) {
    var p = [];
    for (var i in trainings) {
        console.log("Scheduling writting of " + i + ".");
        p.push(writeJson(path_1.join(__dirname, dataPath, "training_" + i + ".json"), trainings[i]));
    }
    console.log("Scheduling writting of " + trainings.length + ".");
    p.push(writeJson(path_1.join(__dirname, dataPath, "testing.json"), testing));
    Promise.all(p).then(function () {
        console.log('Export done.');
    });
}
function bootstrap() {
    var p = [];
    console.log('Starting extraction');
    for (var i = 0; i < size; i++) {
        console.log("Scheduling " + i);
        p.push(convertImage(path_1.join(__dirname, dataPath, "mnist_batch_" + i + ".png")));
    }
    Promise.all(p).then(function (images) {
        var testing = images.splice(images.length - 1);
        completeDataset(images, testing);
    });
}
bootstrap();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3QudHMiXSwibmFtZXMiOlsiY29udmVydEltYWdlIiwid3JpdGVKc29uIiwiY29tcGxldGVEYXRhc2V0IiwiYm9vdHN0cmFwIl0sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsbUJBQTBDLElBQUksQ0FBQyxDQUFBO0FBQy9DLHFCQUFtQixNQUFNLENBQUMsQ0FBQTtBQUMxQixJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztBQUVmLElBQU0sUUFBUSxHQUFHLFdBQVcsRUFDdEIsVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUUvQixzQkFBdUIsU0FBUztJQUM5QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7UUFDekMscUJBQWdCLENBQUMsU0FBUyxDQUFDO2FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO2FBQ2YsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNYLE1BQU0sRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDO2FBQ0QsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFTLElBQUk7WUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBSSxTQUFTLFlBQVMsQ0FBQyxDQUFDO1lBQ25DLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUVmLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3JDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JB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QSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUMxRUEsQ0FBQ0E7SUFFREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsTUFBTUE7UUFDekJBLElBQUlBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzlDQSxlQUFlQSxDQUFDQSxNQUFNQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFFRCxTQUFTLEVBQUUsQ0FBQyIsImZpbGUiOiJleHRyYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vYWxsLnRzXCIgLz5cblxuaW1wb3J0IHtjcmVhdGVSZWFkU3RyZWFtLCB3cml0ZUZpbGV9IGZyb20gJ2ZzJztcbmltcG9ydCB7am9pbn0gZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBOb2RlUG5nIGZyb20gJ25vZGUtcG5nJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgUE5HID0gTm9kZVBuZy5QTkc7XG5cbmNvbnN0IHNpemUgPSAyO1xuIFxuY29uc3QgZGF0YVBhdGggPSAnLi9kaWdpdHMvJyxcbiAgICAgIGV4cG9ydFBhdGggPSAnLi9kaWdpdHMvJztcblxuZnVuY3Rpb24gY29udmVydEltYWdlIChpbWFnZVBhdGgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNyZWF0ZVJlYWRTdHJlYW0oaW1hZ2VQYXRoKVxuICAgIC5waXBlKG5ldyBQTkcoKSlcbiAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QoKTtcbiAgICB9KVxuICAgIC5vbigncGFyc2VkJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coYCR7aW1hZ2VQYXRofSBwYXJzZWRgKTtcbiAgICAgIHZhciBsb2NhbCA9IFtdO1xuICAgICAgXG4gICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgICB2YXIgaWR4ID0gKHRoaXMud2lkdGggKiB5ICsgeCkgPDwgMjtcbiAgXG4gICAgICAgICAgbG9jYWwucHVzaCh0aGlzLmRhdGFbaWR4XSwgdGhpcy5kYXRhW2lkeCsxXSwgdGhpcy5kYXRhW2lkeCsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICByZXNvbHZlKGxvY2FsKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlSnNvbiAoanNvblBhdGgsIGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHdyaXRlRmlsZShqc29uUGF0aCwgSlNPTi5zdHJpbmdpZnkoXy5mbGF0dGVuKGRhdGEpKSwgKGVycm9yKSA9PiB7XG4gICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgIH1cbiAgICAgICBjb25zb2xlLmxvZyhgJHtqc29uUGF0aH0gc2F2ZWRkYCk7XG4gICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcGxldGVEYXRhc2V0ICh0cmFpbmluZ3M6IG51bWJlcltdW10sIHRlc3Rpbmc6IG51bWJlcltdKSB7XG4gIHZhciBwID0gW107XG4gIFxuICBmb3IgKGxldCBpIGluIHRyYWluaW5ncykge1xuICAgIGNvbnNvbGUubG9nKGBTY2hlZHVsaW5nIHdyaXR0aW5nIG9mICR7aX0uYCk7XG4gICAgcC5wdXNoKHdyaXRlSnNvbihqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGB0cmFpbmluZ18ke2l9Lmpzb25gKSwgdHJhaW5pbmdzW2ldKSk7XG4gIH1cbiAgY29uc29sZS5sb2coYFNjaGVkdWxpbmcgd3JpdHRpbmcgb2YgJHt0cmFpbmluZ3MubGVuZ3RofS5gKTtcbiAgcC5wdXNoKHdyaXRlSnNvbihqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGB0ZXN0aW5nLmpzb25gKSwgdGVzdGluZykpO1xuICBcbiAgUHJvbWlzZS5hbGwocCkudGhlbigoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0V4cG9ydCBkb25lLicpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwICgpIHtcbiAgdmFyIHAgPSBbXTtcbiAgXG4gIGNvbnNvbGUubG9nKCdTdGFydGluZyBleHRyYWN0aW9uJyk7ICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICBjb25zb2xlLmxvZyhgU2NoZWR1bGluZyAke2l9YCk7XG4gICAgcC5wdXNoKGNvbnZlcnRJbWFnZShqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGBtbmlzdF9iYXRjaF8ke2l9LnBuZ2ApKSk7XG4gIH1cbiAgXG4gIFByb21pc2UuYWxsKHApLnRoZW4oKGltYWdlcykgPT4ge1xuICAgIGxldCB0ZXN0aW5nID0gaW1hZ2VzLnNwbGljZShpbWFnZXMubGVuZ3RoIC0xKTtcbiAgICBjb21wbGV0ZURhdGFzZXQoaW1hZ2VzLCB0ZXN0aW5nKTtcbiAgfSk7XG59XG5cbmJvb3RzdHJhcCgpO1xuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9