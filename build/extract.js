/// <reference path="./all.ts" />
var fs_1 = require('fs');
var path_1 = require('path');
var NodePng = require('node-png');
var _ = require('lodash');
var PNG = NodePng.PNG;
var size = 21;
var dataPath = './digits/', exportPath = './digits/';
function convertImage(imagePath) {
    return new Promise(function (resolve, reject) {
        fs_1.createReadStream(imagePath)
            .pipe(new PNG())
            .on('metadata', function (data) {
            // console.log(data);
        })
            .on('error', function () {
            reject();
        })
            .on('parsed', function (data) {
            console.log(imagePath + " parsed");
            var local = [];
            for (var y = 0; y < this.height; y++) {
                for (var x = 0; x < this.width; x++) {
                    var idx = (this.width * y + x) << 2;
                    local.push(this.data[idx]);
                }
            }
            resolve(local);
        });
    });
}
function writeJson(jsonPath, data) {
    return new Promise(function (resolve, reject) {
        fs_1.writeFile(jsonPath, JSON.stringify(_.flatten(data)), function (error) {
            if (error) {
                reject(error);
            }
            console.log(jsonPath + " savedd");
            resolve(true);
        });
    });
}
function completeDataset(trainings, testing) {
    var p = [];
    for (var i in trainings) {
        console.log("Scheduling writting of " + i + ".");
        p.push(writeJson(path_1.join(__dirname, dataPath, "training_" + i + ".json"), trainings[i]));
    }
    console.log("Scheduling writting of " + trainings.length + ".");
    p.push(writeJson(path_1.join(__dirname, dataPath, "testing.json"), testing));
    Promise.all(p).then(function () {
        console.log('Export done.');
    });
}
function bootstrap() {
    var p = [];
    console.log('Starting extraction');
    for (var i = 0; i < size; i++) {
        console.log("Scheduling " + i);
        p.push(convertImage(path_1.join(__dirname, dataPath, "mnist_batch_" + i + ".png")));
    }
    Promise.all(p).then(function (images) {
        var testing = images.splice(images.length - 1);
        completeDataset(images, testing);
    });
}
bootstrap();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3QudHMiXSwibmFtZXMiOlsiY29udmVydEltYWdlIiwid3JpdGVKc29uIiwiY29tcGxldGVEYXRhc2V0IiwiYm9vdHN0cmFwIl0sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsbUJBQTBDLElBQUksQ0FBQyxDQUFBO0FBQy9DLHFCQUFtQixNQUFNLENBQUMsQ0FBQTtBQUMxQixJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNwQyxJQUFZLENBQUMsV0FBTSxRQUFRLENBQUMsQ0FBQTtBQUU1QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVoQixJQUFNLFFBQVEsR0FBRyxXQUFXLEVBQ3RCLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFFL0Isc0JBQXVCLFNBQVM7SUFDOUJBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQVNBLE9BQU9BLEVBQUVBLE1BQU1BO1FBQ3pDLHFCQUFnQixDQUFDLFNBQVMsQ0FBQzthQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUNmLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxJQUFJO1lBQzVCLHFCQUFxQjtRQUN2QixDQUFDLENBQUM7YUFDRCxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ1gsTUFBTSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUM7YUFDRCxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQVMsSUFBSTtZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFJLFNBQVMsWUFBUyxDQUFDLENBQUM7WUFFbkMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBRWYsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDckMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FB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O0lBQzFFQSxDQUFDQTtJQUVEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxNQUFNQTtRQUN6QkEsSUFBSUEsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLGVBQWVBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO0lBQ25DQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNMQSxDQUFDQTtBQUVELFNBQVMsRUFBRSxDQUFDIiwiZmlsZSI6ImV4dHJhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9hbGwudHNcIiAvPlxuXG5pbXBvcnQge2NyZWF0ZVJlYWRTdHJlYW0sIHdyaXRlRmlsZX0gZnJvbSAnZnMnO1xuaW1wb3J0IHtqb2lufSBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIE5vZGVQbmcgZnJvbSAnbm9kZS1wbmcnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBQTkcgPSBOb2RlUG5nLlBORztcblxuY29uc3Qgc2l6ZSA9IDIxO1xuIFxuY29uc3QgZGF0YVBhdGggPSAnLi9kaWdpdHMvJyxcbiAgICAgIGV4cG9ydFBhdGggPSAnLi9kaWdpdHMvJztcblxuZnVuY3Rpb24gY29udmVydEltYWdlIChpbWFnZVBhdGgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNyZWF0ZVJlYWRTdHJlYW0oaW1hZ2VQYXRoKVxuICAgIC5waXBlKG5ldyBQTkcoKSlcbiAgICAub24oJ21ldGFkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KCk7XG4gICAgfSlcbiAgICAub24oJ3BhcnNlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke2ltYWdlUGF0aH0gcGFyc2VkYCk7XG4gICAgICBcbiAgICAgIHZhciBsb2NhbCA9IFtdO1xuICAgICAgXG4gICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgICB2YXIgaWR4ID0gKHRoaXMud2lkdGggKiB5ICsgeCkgPDwgMjtcbiAgXG4gICAgICAgICAgbG9jYWwucHVzaCh0aGlzLmRhdGFbaWR4XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICByZXNvbHZlKGxvY2FsKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlSnNvbiAoanNvblBhdGgsIGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHdyaXRlRmlsZShqc29uUGF0aCwgSlNPTi5zdHJpbmdpZnkoXy5mbGF0dGVuKGRhdGEpKSwgKGVycm9yKSA9PiB7XG4gICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgIH1cbiAgICAgICBjb25zb2xlLmxvZyhgJHtqc29uUGF0aH0gc2F2ZWRkYCk7XG4gICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcGxldGVEYXRhc2V0ICh0cmFpbmluZ3M6IG51bWJlcltdW10sIHRlc3Rpbmc6IG51bWJlcltdKSB7XG4gIHZhciBwID0gW107XG4gIFxuICBmb3IgKGxldCBpIGluIHRyYWluaW5ncykge1xuICAgIGNvbnNvbGUubG9nKGBTY2hlZHVsaW5nIHdyaXR0aW5nIG9mICR7aX0uYCk7XG4gICAgcC5wdXNoKHdyaXRlSnNvbihqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGB0cmFpbmluZ18ke2l9Lmpzb25gKSwgdHJhaW5pbmdzW2ldKSk7XG4gIH1cbiAgY29uc29sZS5sb2coYFNjaGVkdWxpbmcgd3JpdHRpbmcgb2YgJHt0cmFpbmluZ3MubGVuZ3RofS5gKTtcbiAgcC5wdXNoKHdyaXRlSnNvbihqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGB0ZXN0aW5nLmpzb25gKSwgdGVzdGluZykpO1xuICBcbiAgUHJvbWlzZS5hbGwocCkudGhlbigoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0V4cG9ydCBkb25lLicpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwICgpIHtcbiAgdmFyIHAgPSBbXTtcbiAgXG4gIGNvbnNvbGUubG9nKCdTdGFydGluZyBleHRyYWN0aW9uJyk7ICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICBjb25zb2xlLmxvZyhgU2NoZWR1bGluZyAke2l9YCk7XG4gICAgcC5wdXNoKGNvbnZlcnRJbWFnZShqb2luKF9fZGlybmFtZSwgZGF0YVBhdGgsIGBtbmlzdF9iYXRjaF8ke2l9LnBuZ2ApKSk7XG4gIH1cbiAgXG4gIFByb21pc2UuYWxsKHApLnRoZW4oKGltYWdlcykgPT4ge1xuICAgIGxldCB0ZXN0aW5nID0gaW1hZ2VzLnNwbGljZShpbWFnZXMubGVuZ3RoIC0gMSk7XG4gICAgY29tcGxldGVEYXRhc2V0KGltYWdlcywgdGVzdGluZyk7XG4gIH0pO1xufVxuXG5ib290c3RyYXAoKTtcblxuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==